  LIBRARIES 
	 |
	 V
	SDL
	OpenGL

	imgui
	assimp

	inotify

	glad or GLEW

	     -------engine---------------
	     |				   |        |
	  _imgui             assimp  inotify
	  |    |
	 SDL OpenGL 

./engine <project folder>



	Shader       Programs
	in -> out  mesh/textures     
				    | 
				 	V
				  shader
					V
				  shader
					V
				   ...
				    V
				pixel_color
				
				-attributes	(vec3,mat2) 		<- BUFFER_ARRAY
				-uniforms 	(vec3,sampler2D) 	<- TEXTURE

	Mesh          	Textures/Bump
	-Verteices		-2D Image
	-Normals
	-UV's

-Draw on Inspector(as component)/Themselves(window)

IDraw(Interface, handles drawing) // ANY CLASS THAT SHOWS SOMETHING ON THE GUI
	virtual const char* imgui_name()=0
	virtual void imgui_preview(){}
	virtual void imgui_draw(){}
File(Serialize/Deserialize) // ANY CLASS REPRESENTED BY A FILE
	serialize()
Component:IDraw(Component interaction) // ANY CLASS THAT'S A COMPONENT
	bool enabled
	max_num()
<Class>_Prefab (Prefab serialization and definitions)
	
Mesh : File(load options),IDraw
	vbo_id
	VAO:Component{
		vao_id
		vao_bind()
		vao_attrib_enable()
		vao_attrib_diable()
		
		n_vertices
		!positions (not present)
		!normals (not present)
		!tex_cords (not present)
		
		gl_draw()
	} vaos;
	vbo_bind()
	load()
	
Texture: File(load options),IDraw
	t_id
Shader : File,IDraw
	s_id
Program : File,Component,IDraw
	p_id
	link_status
	log
	?Shader*/int // Hold pointer or just gpu id
	?attachShader(id)/Shader*
	?detachShader(id)/Shader*
	clearShaders()
	link()
	use()



GameObject <a> ref-> NULL
	Component (Transform) ref-> NULL
		p,r,s
	Component (VAO) 		-> a.obj:a
	Component (Program) 	-> a.prog

Scene <s>
	GameObject <b> ref-> <a> (When Gameobject instatiates, it links refs of components inside)
		Component (Transform) ref-> <a>(Transform)
			p,r,s
		Component (VAO) 		-> a.obj:a
		Component (Program) 	-> a.prog

		Component:IDraw


PREFAB
	 Prefab Linking
	 	 MATTERS
			|
			V
	-Initialize 	(ref -> load_cereal() -> file)  (file -> load_cereal)
	-Modify file	(load() -> if(!is_ref) -> if(!is_ref))
	
	Destroy (ref and file get saved the same way)

For each variable in components: `const get()` and `set(value)` methods

files: File,File,File,File

Does a Prefab need to be a file? Not necessarily, Transform is also a prefab? or is it? Perhaps Transform needs another, different class as base. No, bc it also needs to save dirties. Ok, all components in Gameobject need to save dirties, in case GameObject has a ref,  Do we have to save it always to a file or can it be saved to a ?
GameObject is a file and a preafab, but we need to figure out how it serializes it's components


Load and compile Shaders
Load and upload meshes to OpenGL
Now we have SHADERS and MESHES, we can create Programs
Create Program, add shaders, 

				
RIGHT NOW**************************************    STATUS
Shader and Program initial classes  				DONE

Watch for changes in project asset 
folder and reimport/compile accordingly				DONE

Implement vertex data for gl_helper 				Working..



LATER++++++++++++++++++++++++++++++++++++++++++

Camera Object to Render (Perspective Matrix)
	Transform
	

//Cache (imported assets with same directory structure) *** Later
Assets (any asset you want) 
	What'll we do with these? Load into memory, that's what assimp does, no cooking yet
	Import files by extension with Assimp into memory (save their paths, etc)
	Some files you'll be able to change (txt, glsl, etc...)

File Manager
	Expandable File List of Project Folder

Shader Editor
	Save Button + Edit Text

Main View
	Camera can (Select(LMouseClick), Pan(Alt+MMouse), Rotate(Alt+LMouse), Focus(F))
	
	Translate Arrows
	Rotate Arrows
	Scale Arrows

Inspector
	Shows Components of an Object
	Components
		Transform
		Shaders
	



